#pragma once

#include "base/type.h"
#include "matrix/matrix.h"


class S2MeshIcosahedral {

    struct S2Cell {
        std::array<vector2f, 3> vertices;  // phi, mu
        Scalar area;                       // 球面三角形面积，等价于仿射变换Jacobian的一半
        // DenseMatrix<2,2> J;                // 仿射变换Jacobian（参考→物理）
        // DenseMatrix<2,2> JinvT;            // Jacobian逆转置

        // 仅参考单元 (ξ, η) → 物理球面三角形 (φ, μ)
        HostDevice vector2f map_to_physical(const vector2f& xi) const {
            // const auto& J = get_J();
            Scalar J00 = vertices[1][0] - vertices[0][0];
            Scalar J01 = vertices[2][0] - vertices[0][0];
            Scalar J10 = vertices[1][1] - vertices[0][1];
            Scalar J11 = vertices[2][1] - vertices[0][1];
            return {
                J00*xi[0] + J01*xi[1] + vertices[0][0],
                J10*xi[0] + J11*xi[1] + vertices[0][1]
            };
        }
        HostDevice DenseMatrix<2,2> get_J() const {
            return {
                vertices[1][0] - vertices[0][0],
                vertices[2][0] - vertices[0][0],
                vertices[1][1] - vertices[0][1],
                vertices[2][1] - vertices[0][1]
            };
        }
        HostDevice DenseMatrix<2,2> get_JinvT() const {
            const auto& J = get_J();
            Scalar det = J(0,0)*J(1,1) - J(0,1)*J(1,0);
            return {
                J(1,1)/det, -J(0,1)/det,
                -J(1,0)/det, J(0,0)/det
            };
        }
    };
public:
    static constexpr uInt num_cells = 20; // 黄金五角化十二面体太难写了，换成20面体
    
    static HostDevice constexpr std::array<S2Cell, num_cells> s2_cells(){ return {
        S2Cell{ vector2f{ 2.1243706856919418, 0.0000000000000000 }, vector2f{ 3.1415926535897931, 0.5257311121191336 }, vector2f{ 1.5707963267948966, 0.8506508083520400 }, 0.4787270691636970 },
        S2Cell{ vector2f{ 2.1243706856919418, 0.0000000000000000 }, vector2f{ 1.5707963267948966, 0.8506508083520400 }, vector2f{ 1.0172219678978514, 0.0000000000000000 }, 0.4787270691636970 },
        S2Cell{ vector2f{ 2.1243706856919418, 0.0000000000000000 }, vector2f{ 1.0172219678978514, 0.0000000000000000 }, vector2f{ 1.5707963267948966, -0.8506508083520400 }, 0.4787270691636970 },
        S2Cell{ vector2f{ 2.1243706856919418, 0.0000000000000000 }, vector2f{ 1.5707963267948966, -0.8506508083520400 }, vector2f{ 3.1415926535897931, -0.5257311121191336 }, 0.4787270691636970 },
        S2Cell{ vector2f{ 2.1243706856919418, 0.0000000000000000 }, vector2f{ 3.1415926535897931, -0.5257311121191336 }, vector2f{ 3.1415926535897931, 0.5257311121191336 }, 0.4787270691636970 },
        S2Cell{ vector2f{ 1.0172219678978514, 0.0000000000000000 }, vector2f{ 1.5707963267948966, 0.8506508083520400 }, vector2f{ 0.0000000000000000, 0.5257311121191336 }, 0.4787270691636970 },
        S2Cell{ vector2f{ 1.5707963267948966, 0.8506508083520400 }, vector2f{ 3.1415926535897931, 0.5257311121191336 }, vector2f{ -1.5707963267948966, 0.8506508083520400 }, 0.4787270691636970 },
        S2Cell{ vector2f{ 3.1415926535897931, 0.5257311121191336 }, vector2f{ 3.1415926535897931, -0.5257311121191336 }, vector2f{ -2.1243706856919418, 0.0000000000000000 }, 0.4787270691636970 },
        S2Cell{ vector2f{ 3.1415926535897931, -0.5257311121191336 }, vector2f{ 1.5707963267948966, -0.8506508083520400 }, vector2f{ -1.5707963267948966, -0.8506508083520400 }, 0.4787270691636970 },
        S2Cell{ vector2f{ 1.5707963267948966, -0.8506508083520400 }, vector2f{ 1.0172219678978514, 0.0000000000000000 }, vector2f{ 0.0000000000000000, -0.5257311121191336 }, 0.4787270691636970 },
        S2Cell{ vector2f{ -1.0172219678978514, 0.0000000000000000 }, vector2f{ 0.0000000000000000, 0.5257311121191336 }, vector2f{ -1.5707963267948966, 0.8506508083520400 }, 0.4787270691636970 },
        S2Cell{ vector2f{ -1.0172219678978514, 0.0000000000000000 }, vector2f{ -1.5707963267948966, 0.8506508083520400 }, vector2f{ -2.1243706856919418, 0.0000000000000000 }, 0.4787270691636970 },
        S2Cell{ vector2f{ -1.0172219678978514, 0.0000000000000000 }, vector2f{ -2.1243706856919418, 0.0000000000000000 }, vector2f{ -1.5707963267948966, -0.8506508083520400 }, 0.4787270691636970 },
        S2Cell{ vector2f{ -1.0172219678978514, 0.0000000000000000 }, vector2f{ -1.5707963267948966, -0.8506508083520400 }, vector2f{ 0.0000000000000000, -0.5257311121191336 }, 0.4787270691636970 },
        S2Cell{ vector2f{ -1.0172219678978514, 0.0000000000000000 }, vector2f{ 0.0000000000000000, -0.5257311121191336 }, vector2f{ 0.0000000000000000, 0.5257311121191336 }, 0.4787270691636970 },
        S2Cell{ vector2f{ -1.5707963267948966, 0.8506508083520400 }, vector2f{ 0.0000000000000000, 0.5257311121191336 }, vector2f{ 1.5707963267948966, 0.8506508083520400 }, 0.4787270691636970 },
        S2Cell{ vector2f{ -2.1243706856919418, 0.0000000000000000 }, vector2f{ -1.5707963267948966, 0.8506508083520400 }, vector2f{ 3.1415926535897931, 0.5257311121191336 }, 0.4787270691636970 },
        S2Cell{ vector2f{ -1.5707963267948966, -0.8506508083520400 }, vector2f{ -2.1243706856919418, 0.0000000000000000 }, vector2f{ 3.1415926535897931, -0.5257311121191336 }, 0.4787270691636970 },
        S2Cell{ vector2f{ 0.0000000000000000, -0.5257311121191336 }, vector2f{ -1.5707963267948966, -0.8506508083520400 }, vector2f{ 1.5707963267948966, -0.8506508083520400 }, 0.4787270691636970 },
        S2Cell{ vector2f{ 0.0000000000000000, 0.5257311121191336 }, vector2f{ 0.0000000000000000, -0.5257311121191336 }, vector2f{ 1.0172219678978514, 0.0000000000000000 }, 0.4787270691636970 },
    };}
    static HostDevice vector3f spherical_to_cartesian(vector2f phi_mu) {
        Scalar phi = phi_mu[0];
        Scalar sin_theta = sqrt(1.0 - phi_mu[1]*phi_mu[1]);
        Scalar cos_theta = phi_mu[1];
        return {
            sin_theta * cos(phi),
            sin_theta * sin(phi),
            cos_theta
        };
    }
};